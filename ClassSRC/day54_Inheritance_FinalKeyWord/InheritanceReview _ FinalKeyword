INHEITANCE REVEIW & fINAL KEYWORD
		why do we need it:
		-a class can extend another class to inherit fields and methods
		
		What's inherited:
		-all visible fields and methods 
		- a constructor cannot be inherited
		
		
		We can just use all inherited members just like it's out own
		
		- and we have option to add new fields
		- methods that does not exists in super class
		
		We can alco change what super class provided
		
		Fields:
		       - if we declared  field that already exists in super class, it will hide super class's field
		       IT JUST NEED TO HAVE SAME NAME 
		       IT CAN HAVE EVERYTHING ELSE DIFFERENT
		       
		       How do we access a hidden field in sub class?
		       parent 
		             int capacity
		             
		       child 
		             long capacity
		       
		       super.capacity--->>parent version
		       this.capacity---->>child version
	  
Methods:
tatic method:
	          a sub class define same method as super class,
	          it hides super class's static method
	      EX:
	         public class Parent {
	           public static void showRace{
	             print ("Human");
	           }
		     } 
		     
		   public class Child extends Parent {
		       @Override ---> will give error, static can not be override static method it belongs to class only
	           public static void showRace{  
	             Parent.showRace(); //classname.methodName;
	             print ("Spartan");
	           }
		     }     
		     
		     
		     !!!super. and this. cant be used for static  
		     instance members must not show in static method
	
  Instance Method:
            -we can define sub class version of the method to provide new implementation
 --->> Overriding
            it is exclusively for instance method
		           
		       public class Parent {
	             protected void sleep(){
	               print ("Human");
	             }
		       } 
		     
		     public class Child extends Parent {
		       @Override ---> ENFORCE OVERRIDING RULE
		       public void sleep(){ 
		       		super.sleep();
		       		super.sleep();
		       		print ("Spartan dont sleep");
		       		super.sleep();
		       	}
		     }  		
		   
		   !!!!all methods can be called as much as desired,
		   !!!!Constructor should be called only once in first line statement


OVERLOADING vs OVERRIDING:
//----------------------------------------------------------------------------

final KEYWORD:
             final class: cannot be extended  
                          public final class Spartan {}
                          public class babySpartan extends Spartan {} --->>ERROR!!!
                          
             final method: 
                          instance Method: cannot be overriden 
                          public  class Spartan {
                              public final void run(){
                                 print ("Hi");
                              }
                          }
                          public class babySpartan extends Spartan {
                              @Override  --->>ERROR!!!
                              public void run(){
                                 print ("Bye");
                              }
                          }
                          
                          static Method: do not hide
                          
            final variables:
                         instance field: instance variable outside of any method or block
                                           need to be initialized before object is created
                                           cannot reassign new value  
                         
                         Static fields: static variable outside of any method or block
                         
                         local variables:inside method 
                                         do not reassign
                         
                         method parameter: inside a method header (...)
                         
            final method parameters:
                            parameter becomes not reassignable
  
  CONSTANT: PUBLIC STATIC FINAL
  ***************************************************************
  
  IS-A vs HAS-A relationship
          IS-A - parent child relationship
  		  HAS-A- one blue print has another blue print, without keyword extends
                 it is built using instance variables with reference type
              Ex:   
 *              SoccerClub HAS-A relationship with Stadium, by putting Stadium as instance variable
 *              SoccerClub has access to everything visible that Stadium object can have 
 */               
 
		       		 
	               
		         
					