Object -- instance of class or actual object created 

Class 
	is a blueprint/ template to an object 

	fields/ variables 
		-- instance variable -- define properties of object
		-- static variable  -- this is coming tomorrow 
		
	methods 
		-- instance methods --->  
			 we need an object to use it 
			 and it's mostly used for reading/ manipulating object's property 
			 
		
		-- static methods 
			no object needed to use it 
			and mostly used for utility method 
				that has nothing to do with object's properties 
				
	Constructor 
		-- this is a special block of code that run automatically 
		   each time an object is being created 
		   
		-- it has same name as current Class
		-- it does not have return type 
		-- it can have any type of access modifier
		
		We can have multiple version of constructor 
			-- overloading 
					-- same rule apply as method (same name diff param list)
			 

		   public AC{
		   	
		   		boolean on; 
		   		
		   		same name as classname and must not have return type
		   		THIS IS NOT A CONSTRUCTOR 
		   		It is just a method happen to have same name as class name
		   		and return type is void 
		   		
		   		public void AC(){
		   			sysout("boom!")
		   		}
		   		
		   
		   }
		   
		   in Main method
		   AC ac1 = new AC() ; 
		   
		   
		   If a constructor is not defined in the class 
		   compiler will provide one 
		   		--->>> default constructor -- no arg empty constructor 
		   What if we have any constructor exaksts in the class
		   		--->>> we don't get default constructor by compiler 
		   		
		
		What's the most useful way to use constructor 
			 initialize all the field values of an object while being created
		   
		
		
		
     
     	Inside another class Called JobSeeking with main method 
     
     *   Create few job objects and and add it to ArrayList<Job> object
     *   iterate over all items and print them out
     *
     * */
		
		
		 if we print out any reference variable directly
		 or any object directly 
		 it will by default call toString() method 
		 
		 if you have toString method defined in your own class 
		 it will print out whatever that method return 
		 if not we will get Hashcode
		 
		 when we print out 
		 List<WrapperType> List<String> objects directly 
		 		it will just show what's inside directly 
		 if it's 
		 List<CustomType> object and 
		 	if there is toString method defined in that CustomType Class
		 	it will print out each item as the toString return value
		 		instead of hashcode 
		 		
//POJO Class---> Plain Old Java Object
 * it has private fields to represent object's attributes
 * it has public getters and setter
 * it has constructors to set all the values
 * it has toString method to return String representation of the object in nice format with all fields values
 		
// immutable object means 
once it's created , it can not be changed 
// READ ONLY OBJECT 
 non-resizable -- array 
 it can not change in size , cant shrink cant expand 
 can we change array -- yes , arr[0] = new value 
		
//READ ONLY OBJECT  - immutable object, only with getters , no setters
//WRITE ONLY OBJECT - mutable object, only with setters , no getters	
	
	
	---------------------------------------------------------
	---------------------------------------------------------
	
	Constructor
  -- a block of code that run when object is being created 
    -- it has same name as class name 
    -- it has no return type 
    
    -- access modifier ---> ANY Access modifier
    public class Person {
      public Person(){ }
  
      public Person(String name){ }
    }
    -- Default behaviour of compiler 
      if we dont have any constructor , 
        -- compiler will provide one 
        -- it no arg constructor and it has empty body 
        -- it's called default constructor 
      if we have any constructor 
        -- compiler does not provide default constructor 
    public Student{
      public Student(String name){
      }
    }
    inside main somewhere 
    Student s = new Student() ;  COMPILER ERROR
    // What is constructor mostly used for : 
      creating object with initial state 
      -- initilize all the fields value along with creation
  Few terms about object creattion : 
    instantiating a class 
    creating instance of class 
    creating an object 
  ALL OF THEM ARE TALKING ABOUT SAME THING
  Where can we call a constructor : 
    it can only be called inside another constructor of same class using this(args...)
  Constructor chaining 
    -- calling one constructor in another constructor 
    Rules for chaing 
      1, this(args..) has to be first statement in constructor body. 
      2, can be called only once in one constructor 
      public Student(){
        this("spartan");
        this("spartan"); BAD CALL !!!`
        sysout......
      }
      public Student(String name){
      
      }
      3, Recursive call should be avoided or it will not compiler 
        you call me , i call you -->> recursive 
      public Student(){
        this("spartan");
      }
      public Student(String name){
        this(); 
      }
  Purpose of using constructor chaining 
    -- DRY PRINCIPLE -->> DO NOT REPEAT YOURSELF 
    -- code reusability and maintainibility
